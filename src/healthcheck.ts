import { cacheConnection } from "./checks/cache.js";
import { cpuCheck } from "./checks/cpu.js";
import { dbConnection } from "./checks/db.js";
import { disk } from "./checks/disk.js";
import { egress } from "./checks/egress.js";
import { memoryCheck } from "./checks/memory.js";
import { CheckRegistry, HealthCheck } from "./checks/types.js";
import { type Config, Status } from "./index.js";


// The check names are snake case because the checks config is snake case
const checks: CheckRegistry = {
  memory_usage: memoryCheck,
  outbound_internet: egress,
  disk_space: disk,
  cache_connection: cacheConnection,
  db_connection: dbConnection,
  cpu_usage: cpuCheck,
};

export const healthcheckHandler = async (
  headers: Record<string, string | undefined>,
  config: Config
) => {
  const acceptHeader = headers["accept"];
  let status: Status = Status.pass;
  let results: Record<string, HealthCheck> = {};

  const checkPromises = Object.entries(config.checks)
    .filter(([_, enabled]) => enabled)
    .map(async ([checkName]) => {
      if (checks[checkName]) {
        results[checkName] = await checks[checkName](config);

        if ([Status.fail, Status.warn].includes(results[checkName].status)) {
          status = results[checkName].status;
        }
      }
    });

  await Promise.all(checkPromises);

  if (acceptHeader && acceptHeader.includes("text/html")) {
    const bannerColor = status === Status.pass ? "#4CAF50" :
                       status === Status.warn ? "#FFC107" : "#F44336";
    const bannerTitle = status === Status.pass ? "üëå It's All Good" : "‚ùå Something's Wrong";

    return {
      type: "text/html",
      body: `
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Health Check</title>
              <style>
                body {
                  margin: 0;
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  line-height: 1.6;
                }
                .banner {
                  background-color: ${bannerColor};
                  color: white;
                  padding: 2rem;
                  text-align: center;
                  margin-bottom: 2rem;
                }
                .banner h1 {
                  margin: 0;
                  font-size: 2.5rem;
                }
                .checks-container {
                  max-width: 500px;
                  margin: 0 auto;
                  padding: 0 1rem;
                }
                .checks-list {
                  list-style: none;
                  padding: 0;
                }
                .check-item {
                  margin-bottom: 1rem;
                  padding: 0.5rem;
                  border-radius: 4px;
                }
                .time {
                  color: #666;
                  font-size: 0.9rem;
                }
              </style>
            </head>
            <body>
              <div class="banner">
                <h1>${bannerTitle}</h1>
              </div>
              <div class="checks-container">
                <ul class="checks-list">
                  ${Object.entries(results)
                    .sort(([a], [b]) => a.localeCompare(b))
                    .map(([checkName, checkResult]) => {
                      const checkIcon = checkResult.status === Status.pass ? "‚úÖ" :
                                      checkResult.status === Status.warn ? "‚ö†Ô∏è" : "‚ùå";
                      const valueDisplay = ["true", "false"].includes(checkResult.value) ? "" : `(${checkResult.value})`;
                      return `<li class="check-item">
                               ${checkIcon} <strong>${checkResult.message}</strong> ${valueDisplay}
                               <span class="time" style="color: firebrick;">[${checkResult.time}ms]</span>
                             </li>`;
                    })
                    .join("")}
                </ul>
              </div>
            </body>
            </html>
          `,
    };
  } else {
    return {
      type: "application/json",
      body: JSON.stringify({
        status,
        description: "Health check response, generated by allgood.",
        results,
      }),
    };
  }
};
